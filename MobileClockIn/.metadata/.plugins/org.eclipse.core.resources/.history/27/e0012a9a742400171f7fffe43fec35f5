package ua.server.base.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.springframework.security.authentication.encoding.ShaPasswordEncoder;
import org.springframework.security.core.userdetails.UserDetails;

/**
 * hash is a "one-way" function. this class is able to generate Hash of a string
 * with different algoritms
 */
public final class Hasher {

	/**
	 * returns hash of plain string
	 */
	public final String hashString(String plain)
			throws NoSuchAlgorithmException {

		if (plain == null)
			return null;

		plain = plain.trim();
		if (plain.equals(""))
			return "";

		MessageDigest md = MessageDigest.getInstance("SHA-1");
		byte[] x = plain.getBytes();
		md.update(x);
		byte[] y = md.digest();
		String cipher = new String(y);
		return cipher;
	}

	//method names are different because if we use different algorithms later,
	// the string for each entity needs to be hashed with same algorithm every
	// time
	/**
	 * returns hash of user password
	 */
	public static final String hashUserPassowrd(String plain, String salt) {
		if (plain == null)
			return null;
		ShaPasswordEncoder encoder = new ShaPasswordEncoder();
		return encoder.encodePassword(plain, salt);
	}

	public static boolean comparePasswords(String plainPassword, String hashedPassword) {
//		Hasher hasher = new Hasher();
		String hashPassword = hashUserPassowrd(plainPassword, null);
		return hashPassword.equals(hashedPassword);
//			throw new Exception("Authentification Failed! Invalid UserName or Password");
	} 	

	public static boolean authenticate(UserDetails user, String password) {
//		Hasher hasher = new Hasher();
		String hashPassword = hashUserPassowrd(password.trim(), null);
		if (user == null || !hashPassword.equals(user.getPassword()))
			return false;
		return true;
//			throw new Exception("Authentification Failed! Invalid UserName or Password");
	} 	
}